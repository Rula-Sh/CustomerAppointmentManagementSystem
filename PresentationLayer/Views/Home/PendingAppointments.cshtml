@model IEnumerable<AppointmentViewModel>

@{
    ViewData["Title"] = "Pending Appointments";
}
<h1>Pending Appointments</h1>

@{
    var pendingAppointments = Model.Where(a => a.Status == "Pending").ToList();
}

@if (!pendingAppointments.Any())
{
    <h2>
        <i class="bi bi-exclamation-triangle"></i>
        No Pending Appointments booked yet
    </h2>
}
else
{
    <div class="row">
        <table class="table table-striped mt-4">
            <thead>
                <tr>
                    <th> Service </th>
                    <th> Customer </th>
                    <th> Date </th>
                    <th> Status </th>
                    <th> Actions</th>
                </tr>
            </thead>
            <tbody class="pendingAppointments">
                @foreach (var appointment in Model)
                {
                    if (appointment.Status == "Pending")
                    {
                        <tr>
                            <a class="text-black link-underline link-underline-opacity-0" asp-action="Details" asp-route-id="Id">
                            <td>@appointment.Name</td>
                            <td>@appointment.Customer.FullName</td>
                            <td>@appointment.Date</td>
                            <td>@appointment.Status</td>
                            </a>
                            <td>
                                <a href="javascript:;" class="btn btn-success js-approve ms-1" data-id="@appointment.Id">
                                    <i class="bi bi-check"></i>
                                </a>
                                <a href="javascript:;" class="btn btn-danger js-reject ms-1" data-id="@appointment.Id">
                                    <i class="bi bi-x"></i>
                                </a>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

    </div>
    <a asp-action="Index" class="btn btn-outline-secondary mt-4 ">
        <i class="bi bi-arrow-left"></i>
        Go Back
    </a>
}

@section Scripts {

    <script>
        $(document).ready(function () {

            $('.js-approve').on('click', function () {
                var btn = $(this);

                console.log(btn.data('id'));

                 bootbox.prompt({
                    title: "Add instructions before attending the appointment",
                    centerVertical: true,
                    callback: function(result){
                        if(result == ''){result='no notes';}
                        $.ajax({ // $.ajax is a jQuery function used to perform an asynchronous HTTP (Ajax) request. Ajax allows you to send and receive data from a server without reloading the entire web page. This is particularly useful for creating dynamic and interactive web applications.
                            // url: 'Approve/' + btn.data('id'),
                            url: 'Approve/',
                            data: { 'id' : btn.data('id'), 'notes' : result },
                            type: 'POST',
                            success: function () {
                                var row = btn.closest('tr');
                                row.addClass('animate__animated', 'animate__zoomOut');

                                setTimeout(function () {
                                    row.remove();
                                }, 1000);

                                toastr.success('Appointment Approved');
                            },
                            error: function (err) {
                                toastr.error('Something went wrong!', err);
                            }
                        });
                    }
                 });
            });

            $('.js-reject').on('click', function (){
                var btn = $(this);

                console.log(btn.data('id'));
                $.ajax({ // $.ajax is a jQuery function used to perform an asynchronous HTTP (Ajax) request. Ajax allows you to send and receive data from a server without reloading the entire web page. This is particularly useful for creating dynamic and interactive web applications.
                    url: 'Reject/' + btn.data('id'),
                    type: 'POST',
                    success: function () {
                    var row = btn.closest('tr');
                    row.addClass('animate__animated', 'animate__zoomOut');

                    setTimeout(function () {
                        row.remove();
                    }, 1000);


                        toastr.error('Appointment Rejected');
                    },
                    error: function () {
                        toastr.error('Something went wrong!');
                    }
                });
            });
        });
    </script>
}