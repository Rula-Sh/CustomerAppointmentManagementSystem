@model BookAppointmentViewModel

@{
    ViewData["Title"] = "Book an Appointment";
}

<h2>Book an Appointment</h2>

<hr />

<form method="post" asp-action="Add" enctype="multipart/form-data">

    <div class="row justify-content-around">
        <div class="col-md-6">
            @* columns medium 4 *@
            @* enctype="multipart/form-data" is used so that i can save the file in the server when i POST the form*@
            @*i am already inside the controller, so i dont need to mention it*@
            <input type="hidden" asp-for="Id" />
            @* <input type="hidden" asp-for="Id"/> so that when i modify the service, i be able to change it based on the id*@

            <div class="form-group">
                <label class="text-black" asp-for="Services"><strong>Service</strong></label>
                @* <input id="duration" type="text" class="form-control" asp-for="DurationIn" placeholder="01:30" maxlength="5" value=""/> @* better make it a list *@
                <div id="duration-slots"></div> @* if i wanted to use the function initializeDurationDropdown i should removed the select tag below *@
                <input id="serviceId" type="hidden" asp-for="ServiceId" />
                <input id="ServiceName" type="hidden" asp-for="ServiceName" />
                <select class="form-control" id="servicesList">
                    <option value="">-- Select a Service --</option>
                    @foreach(var service in Model.Services)
                    {
                        <option value="@service.Id">@service.Name</option>
                    }
                </select>
                <p id="selectServiceAlert" class="alert alert-danger p-1 ps-2" style="display:none"> ● Please Select a service</p>
                <span asp-validation-for="Services" class="text-danger"></span>
            </div>

            <div class="form-group mt-3">
                <p><strong>Price: </strong> <span id="servicePrice" asp-for="ServicePrice"></span></p>
                <input id="priceInput" type="hidden" asp-for="ServicePrice" />
                <p><strong>Description: </strong> <span id="serviceDescription"></span></p>
            </div>

            <div class="form-group">
                <label class="text-black" asp-for="Date"><strong>Date</strong></label>
                @* <input id="duration" type="text" class="form-control" asp-for="DurationIn" placeholder="01:30" maxlength="5" value=""/> @* better make it a list *@
                <div id="duration-slots"></div> @* if i wanted to use the function initializeDurationDropdown i should removed the select tag below *@
                <select class="form-control" id="serviceDatesList" asp-for="Date">
                    <option value="">-- Select a Date --</option>
                </select>
                <p id="selectDateAlert" class="alert alert-danger p-1 ps-2" style="display:none"> ● Please Select a Date</p>
                <span asp-validation-for="Date" class="text-danger"></span>
            </div>

            <div class="mb-4">
                <button type="submit" class="btn btn-primary mt-4">
                    <i class="bi bi-check"></i>
                    Submit
                </button>
                <a asp-action="Index" class="btn btn-outline-secondary mt-4">
                    <i class="bi bi-x"></i>
                    Cancel
                </a>
            </div>
        </div>

        <div class="col-5 datepicker" id="selectedDatePicker">
        </div>
        @* <div class="col-md-5 m-2"> *@
        @*     <div id="selectedServicesContainer" class="mt-3"></div> *@
        @* </div> *@
    </div>
</form>



@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial"); // to have validation for the input
    }

    <script>

        document.getElementById('servicesList').addEventListener('change', function () {
            const serviceId = this.value;
            if (!serviceId) return; 
            fetch(`/home/GetServiceDetails?serviceId=${serviceId}`)
            .then(res => res.json())
            .then(data => {
                document.getElementById('servicePrice').textContent = `${data.price} JD`;
                document.getElementById('serviceDescription').textContent = `${data.description}`;
                    $('#priceInput').val(data.price);
                    $('#serviceId').val(serviceId);
                    $('#ServiceName').val(`${data.name}`);

                const dateDropdown = document.getElementById('serviceDatesList'); 
                dateDropdown.innerHTML = '<option value="">-- Select a Date --</option>';
                data.dateTimeSlotGroups.forEach(group => {
                    // const dateStr = new Date(group.date).toLocaleDateString();

                    const normalizedDate = group.date.replace(/-/g, '/'); // replace any dashes with slashes to avoid incorrect ISO date parsing
                    // "13-05-2025" might be misinterpreted as ISO (yyyy-MM-dd) and cause a RangeError..... while "13/05/2025" is more likely to be treated as a locale-specific (dd/MM/yyyy) date.

                    const [day, month, year] = normalizedDate.split('/');
                    const validDate = new Date(`${year}-${month}-${day}`); // Convert to yyyy-MM-dd format (ISO-friendly format)... which is the safest format to use with the JavaScript Date constructor.
                    console.log("group.date"+group.date);
                    console.log("validDate"+validDate);
                    const dateStr = new Intl.DateTimeFormat('en-GB').format(validDate); // en-GB uses dd/MM/yyyy format
                    
                    console.log("dateStr"+dateStr);
                    group.timeSlots.forEach(time => {
                        const option = document.createElement('option');
                        //  option.value = group.date;
                        // option.textContent = new Date(group.date).toLocaleDateString();
                        option.value = `${dateStr} - ${time}`;
                        option.textContent = `${dateStr} ${time}`; 
                        dateDropdown.appendChild(option);
                    }); 
                }); 
                }).catch(err => console.error('Error loading service details:', err)); 
            });

        document.addEventListener("DOMContentLoaded", function () {
            const serviceSelect = document.getElementById("servicesList");
            const dateSelect = document.getElementById("serviceDatesList");
            const selectServiceAlert = document.getElementById("selectServiceAlert");
            const selectDateAlert = document.getElementById("selectDateAlert");


            // Show service alert if date is selected without selecting a service
            dateSelect.addEventListener("focus", function () {
                if (!serviceSelect.value) {
                    selectServiceAlert.style.display = "block";
                } else {
                    selectServiceAlert.style.display = "none";
                }
            });

            // hide alert when user selects a service
            serviceSelect.addEventListener("change", function () {
                if (serviceSelect.value) {
                    selectServiceAlert.style.display = "none";
                }
            });


            // hide alert when user selects a date
            dateSelect.addEventListener("change", function () {
                if (dateSelect.value) {
                    selectDateAlert.style.display = "none";
                    onDateSelect(dateSelect.value);
                }
            });


            // Form submission validation
            $('form').on('submit', function (e) {
                let isValid = true;

                if (!serviceSelect.value) {
                    selectServiceAlert.style.display = "block";
                    isValid = false;
                } else {
                    selectServiceAlert.style.display = "none";
                }

                if (!dateSelect.value) {
                    selectDateAlert.style.display = "block";
                    isValid = false;
                } else {
                    selectDateAlert.style.display = "none";
                }

                if (!isValid) {
                    e.preventDefault();
                } else{
                }
            });
        });

        function onDateSelect(date) {

                var modelDate= date.split(" ")[0];
                var dateParts = modelDate.split('/');
                var selectedAppointmentDate = new Date(dateParts[2], dateParts[1] - 1, dateParts[0]);

                console.log(modelDate);
                console.log(dateParts);
                console.log(selectedAppointmentDate);


                // destroy datepicker if existed
                $("#selectedDatePicker").datepicker("destroy");

                $("#selectedDatePicker").datepicker({
                    dateFormat: "dd/MM/yyyy",
                    defaultDate: selectedAppointmentDate,
                    beforeShowDay: function (date) {
                        // disable all dates but the appointment date
                        if (date.getFullYear() === selectedAppointmentDate.getFullYear() &&
                            date.getMonth() === selectedAppointmentDate.getMonth() &&
                            date.getDate() === selectedAppointmentDate.getDate()) {
                            return [true, '']; // enable only the appointment date
                        }
                        return [false, '']; // disable all other dates
                    }
                });
            };


    </script>

}