@model ServiceViewModel

@{
    ViewData["Title"] = "Edit Service";
}
<!-- Page Header Start -->
<div class="container-fluid page-header py-5 mb-5">
    <div class="container py-5">
        <h1 class="display-3 text-white mb-3 animated slideInDown">Edit <span class="text-primary">@Model.Name</span></h1>
        <nav aria-label="breadcrumb animated slideInDown">
            <ol class="breadcrumb">
                <a asp-action="Index" asp-controller="Home" class="breadcrumb-item text-white active"> Home </a>
                <a asp-action="Index" asp-controller="Services" class="breadcrumb-item text-white active"> Services </a>
                <a asp-action="Edit" asp-controller="Services" class="breadcrumb-item text-white active"> Edit @Model.Name </a>
            </ol>
        </nav>
    </div>
</div>
<!-- Page Header End -->

<form method="post" asp-action="@(Model.Id > 0 ? "Edit" : "Add")" enctype="multipart/form-data">

    <div class="row justify-content-between">
        <div class="col-md-6">
            @* enctype="multipart/form-data" is used so that i can save the file in the server when i POST the form*@
            <input type="hidden" asp-for="Id" />
            @* <input type="hidden" asp-for="Id"/> so that when i modify the service, i be able to change it based on the id*@
            <input type="hidden" asp-for="ProviderId" value="@Model.ProviderId" />
            <div class="form-group">
                <label class="text-muted" asp-for="Name"></label> @* it would add the Title by default *@
                <input type="text" class="form-control" asp-for="Name" maxlength="250" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="text-muted" asp-for="Description"></label>
                <textarea class="form-control" asp-for="Description" maxlength="2500"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
                @* to stop the user from resizing the text area, i need to modify the site.css file*@
            </div>
            <div class="form-group">
                <label class="text-muted" asp-for="Duration"></label>
                @* <input id="duration" type="text" class="form-control" asp-for="DurationIn" placeholder="01:30" maxlength="5" value=""/> @* better make it a list *@
                <div id="duration-slots"></div> @* if i wanted to use the function initializeDurationDropdown i should removed the select tag below *@
                <select class="form-control" id="durationList" asp-for="Duration">
                    <option value="">-- Select Duration --</option>
                    <option value="00:30">00:30</option>
                    <option value="01:00">01:00</option>
                    <option value="01:30">01:30</option>
                    <option value="02:00">02:00</option>
                    <option value="02:30">02:30</option>
                    <option value="03:00">03:00</option>
                </select>
                <p id="selectDurationAlert" class="alert alert-danger p-1 ps-2" style="display:none"> ● Please Select a duration</p>
                <span asp-validation-for="Duration" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="text-muted" asp-for="Price"></label>
                <input type="text" class="form-control" asp-for="Price" placeholder="0.00" step="0.01" min="0" max="9999.99" />
                <span asp-validation-for="Price" class="text-danger"></span>
            </div>

            <div class="form-group">
                @* i removed asp-for because inside the renderDateSection function, i added input tags named with DateTimeSlotGroup value, those values will be automatically bounded to DateTimeSlotGroups property on form submit *@
                <label class="text-muted">Select Other Dates</label>
                <input id="multiDatePicker" type="text" class="form-control" placeholder="Select Dates" readonly />
                <p id="dateValidationAlert" class="alert alert-danger p-1 ps-2" style="display:none"> ● Please select at least one date with one time slot.</p>

            </div>

            <button type="submit" class="btn btn-primary mt-4">
                <i class="bi bi-check"></i>
                Submit
            </button>
            <a asp-action="Index" class="btn btn-outline-secondary mt-4">
                <i class="bi bi-x"></i>
                Cancel
            </a>
        </div>
        <div class="col-md-5 m-2">
            <div id="selectedDatesContainer" class="mt-3">
                @* Dates and TimeSlots Will Be Created Here *@
            </div>
        </div>
    </div>

</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial"); // to have validation for the input
    }


    <script>
        const selectedDates = []; // to track selected dates
        const dateTimeData = {}; // contain time slots per date
        // dateTimeData structure will look like this:
        /*dateTimeData = {
        "2025-04-10": ["08:00 - 10:00", "12:00 - 14:00"],
        "2025-04-11": ["9:30 - 11:00"]
        };*/



        // $(function() { ... });  is jQuery short-hand for "$(document).ready(function() { ... });".... What it's designed to do (amongst other things) is ensure that your function is called once all the DOM elements of the page are ready to be used.
        // in page initialization load the service duration list and a list of when the service can be available
        $(function () {
            //initializeDurationDropdown();
            initializeDatePicker();

            // set the values of selectedDates and dateTimeData from the service ServiceDates FileSystemDirectoryHandle TimeSlots (DateTimeSlotGroups and TimeSlots in VM)
        @foreach (var group in Model.DateTimeSlotGroups)
        {
            <text>
                            selectedDates.push("@group.Date");

                            dateTimeData["@group.Date"] = [
                @Html.Raw(string.Join(",", group.TimeSlots.Select(ts => $"\"{ts}\"")))
                            ];
            </text>
        }

            console.log(selectedDates);
            console.log(dateTimeData);

            // create service dates containers
        @for (int i = 0; i < Model.DateTimeSlotGroups.Count; i++)
        {
            var group = Model.DateTimeSlotGroups[i];
            <text>
                                renderDateSection('@group.Date', @i, @Html.Raw(Json.Serialize(group.TimeSlots)));
            </text>
        }

            $("#durationList").on("change", function () { // added this here since i no longer use initializeDurationDropdown function
                $('#selectDurationAlert').hide(); // hide the alert box
            });

            document.querySelectorAll('.time-select').forEach(function(select) {
            select.innerHTML += generateTimeOptions(); // append generated options
            });

        });

        // -------------------------------------- list all durations a service can take --------------------------------------
        function initializeDurationDropdown() {
            const container = $("#duration-slots"); // where the list of durations will be added in
            let options = ''; // will contain a list of duraitons a service can take

            for (let hour = 0; hour <= 3; hour++) { // a service duration can be starting from 30m till 3h
                //.padStart(2, '0') adds at the beginning of the string ('0') when the string does not meed the reuquired length (2).. if the string was 5 the result will be 05, if the string was 10 the result will not change
                if (hour === 0) {
                    options += `<option value="00:30">00:30</option>`; // start with 00:30
                } else if(hour===3){
                    options += `<option value="03:00">03:00</option>`; // last item will be with 03:00
                } else {
                    options += `<option value="0${hour}:00">0${hour}:00</option>`;
                    options += `<option value="0${hour}:30">0${hour}:30</option>`;
                }
            }
            //create a dropdown list of all possible durations can a service have
            const section = $(`
                <select class="form-control" id="durationList" asp-for="DurationIn">
                    <option value="">-- Select Duration --</option>
                    ${options}
                </select>
            `);
            container.append(section); // add all service durations options to duration-slots id on the page to #duration-slots element

            // had to add the on change code in the initializeDurationDropdown because:
            // - #durationList is dynamically created — it's not in the HTML at page load.
            // - It's only added to the DOM when initializeDurationDropdown() runs (which is in your $(function () { ... }) block).
            // - So if I try to attach an event before that element exists, document.getElementById("durationList") returns null, and jQuery’s $("#durationList") selects nothing.

            /*document.getElementById("durationList").addEventListener("change", function () {
                //document.getElementById('selectDurationAlert').style.display = "none";
                $('#selectDurationAlert').hide();
            });*/
            // using jQuery... works same as the code above "document.getElementById("durationList")...."
            $("#durationList").on("change", function () {
                $('#selectDurationAlert').hide(); // hide the alert box
            });
        }



        // -------------------------------------- when selecting a date, add it to selectedDates[] --------------------------------------
        function initializeDatePicker() {
            $("#multiDatePicker").datepicker({
                dateFormat: "dd-mm-yy",
                onSelect: function (dateText) {

                    //check if the service duration was selected
                    var durationValue = $("#durationList").val();
                    console.log(durationValue);
                    if(!durationValue){
                        $('#selectDurationAlert').show();
                        return;
                    }
                    // add the selected date to selectedDates[] and show the DateSection
                    if (!selectedDates.includes(dateText)) { // check id the selected date was selected
                        selectedDates.push(dateText); // add selected date to the selectedDates list
                        dateTimeData[dateText] = []; // Initialize empty time list
                        const dateIndex = selectedDates.indexOf(dateText); // to use the date index in the input tag later in renderDateSection
                        renderDateSection(dateText, dateIndex);
                    } else if(!durationValue){
                        $('#selectDurationAlert').show();
                        return;
                    }
                }
            });
        }
        // -------------------------------------- create DateSection when selecting a date --------------------------------------
        function renderDateSection(date,index,selectedTimes) {
            const container = $("#selectedDatesContainer");  // where the list of selected dates will be added in

            const timeOptions = generateTimeOptions(); // get the list of when the service can be available based on the duration

            //create a dateSection element that will contain the a list of when the service can be available
            const section = $(`
                <div class="date-section rounded-4 border border-1 mb-3" data-date="${date}" id="dateSection">
                    <div class="date-header d-flex justify-content-between ps-3 pe-3 pt-2 pe-2 rounded-top-4">
                        <h5>${date}</h5>
                        <i onclick="removeDate('${date}')" class="bi bi-trash3-fill h5" style="color:red;"></i>
                    </div>
                    <div class="time-slots row ps-3 pe-3 ">

                    </div>
                    <select asp-for="TimeSlots" class="form-control time-select  rounded-top-0 rounded-bottom-4" id="select-${date}" onchange="addTimeSlot('${date}')">
                        <option value="">-- Select Time --</option>
                        ${timeOptions}
                    </select>
                    <input type="hidden" class="date-input" name="DateTimeSlotGroups[${index}].Date" value="${date}" />
                </div>
            `);
            // <div class="time-slots row"> will contain a list of when the service can be available
            container.append(section); // add all the times where a service can be available on the page to #selectedDatesContainer element

            // create selected timeSlots items
            const selectElement = $('#select-' + date);
            const slotContainer = section.find(".time-slots");

            // Pre-render each selected time slot
            selectedTimes.forEach((time, timeIndex) => {
                selectElement.find(`option[value="${time}"]`).prop('selected', true); // optional

                // Push into dateTimeData if not present
                if (!dateTimeData[date]) dateTimeData[date] = [];
                if (!dateTimeData[date].includes(time)) {
                    dateTimeData[date].push(time);
                }

                const slot = $(`
                    <div class="time-slot col-4 mb-2 text-center">
                        ${time}
                        <input type="hidden" name="DateTimeSlotGroups[${index}].TimeSlots[${timeIndex}]" value="${time}" />
                        <i onclick="removeTimeSlot('${date}', '${time}', this)" class="bi bi-trash3" style="color:red;"></i>
                    </div>
                `);
                slotContainer.append(slot);

                // Optionally remove from select dropdown
                selectElement.find(`option[value="${time}"]`).remove();
            });

        }

        // -------------------------------------- list the times where a service can be available --------------------------------------
        function generateTimeOptions() {
            var durationValue = $("#durationList").val(); // get the selected service duration
            if (!durationValue) return ''; // additional check to make sure the user selected the service duration

            var options = ''; // will contain a list of the times where a service can be available
            var doesDurationHasHalfAnHour = Object.is(durationValue.substring(3,5), '30'); // .equals() does not exist in JS either use == or ===
            // console.log(Object.is(durationValue.substring(3,5), '30'));
            var doesRemainerHasHalfAnHourLeft = false; // if the previous endstHour ends with __:30 set doesRemainerHasHalfAnHourLeft to true so that the next index starts with __:30
            //var isHourIndexRangeValid = true to make sure that the service can be provided before the work hours or when the work hour ends (at 16:00... 4pm)
            var hourIndex = 8;
            var startHour = `${pad(hourIndex)}:00`; // services will be available starting with 8:00
            while (hourIndex < 16) {

                hourIndex+=parseInt(durationValue.substring(0,2)); // the hour time + the service duration

                if (doesRemainerHasHalfAnHourLeft)
                {
                    if (++hourIndex > 16) break;
                } else {
                    if (hourIndex > 16) break;
                }

                if(!doesDurationHasHalfAnHour){ // if the duration does NOT have __:30
                    var endHour = `${pad(hourIndex)}:00`; // pad() is a funciton created to reduce using 'hourIndex.toString().padStart(2, '0');' on multiple places

                } else { // if the duration DOES have __:30
                    if(!doesRemainerHasHalfAnHourLeft) {// if the prev time-slot does NOT end with __:30
                        var endHour = `${pad(hourIndex)}:30`;
                        doesRemainerHasHalfAnHourLeft = true;

                    } else {// if the prev time-slot DOES end with __:30
                        var endHour = `${pad(hourIndex)}:00`;
                        doesRemainerHasHalfAnHourLeft = false;
                    }
                }
                options += `<option value="${startHour} - ${endHour}">${startHour} - ${endHour}</option>`;// add to the list when a service can be available
                startHour=endHour; // to use the startHour with the next available time
            }
            return options;
        }

        function pad(num) {
            return num.toString().padStart(2, '0');
        }

        // -------------------------------------- add when the service can be available when selecting a time-slot form a sprcific date --------------------------------------
        function addTimeSlot(date) {

            const select = $(`#select-${date}`); // get the id of the dropdown list of a specific date
            const time = select.val(); // get the value of the selected time-slot... note: the value is an attribute of the option tag => <option value"__">.....</option>
            const container = $(`.date-section[data-date="${date}"] .time-slots`); // will contain the selected item-slots that the service will be available at

            console.log("in addTimeSlot");
            console.log("date",date);
            console.log("dateTimeData",dateTimeData);
            console.log("time",time);
            console.log("dateTimeData[date].includes(time)",dateTimeData[date].includes(time));

            if (time && !dateTimeData[date].includes(time)) { // if time is not null and the selected time is not already in the list
                dateTimeData[date].push(time); // add the time-slot to the specified date
                const dateIndex = selectedDates.indexOf(date);
                const timeIndex = dateTimeData[date].length - 1;

                // create time-slot element that will contain the selected time-slot of a specific date
                const section = $(`
                    <div class="time-slot col-4 mb-2 text-center">
                    ${time}
                        <input type="hidden" name="DateTimeSlotGroups[${dateIndex}].TimeSlots[${timeIndex}]" value="${time}" />
        @*DateTimeSlotGroups[${dateIndex}].TimeSlots[${timeIndex}]      =       time*@

                        <i onclick="removeTimeSlot('${date}', '${time}', this)" class="bi bi-trash3" style="color:red;"></i>
                    </div>
                `);
                container.append(section); // add the selctet time-slot to time-slots class
                select.val(""); // reset select

                //remove selected time from the list
                select.find(`option[value="${time}"]`).remove();
                // option[value="${time}"] => this is a CSS selector that targets <option> elements with a value attribute exactly equal to the value of time.

            }
        }

        // -------------------------------------- remove time-slot --------------------------------------
        function removeTimeSlot(date, time, button) {
            // Remove timeSlot from dateTimeData
            dateTimeData[date] = dateTimeData[date].filter(t => t !== time);// delete the time-slot from the date that it is refered to
            // (t => t !== time) filters dateTimeData[date] from the unwanted time-slot... meaning when the filter reaches t === time it skips it

            // remove the timeSlot div
            const slotDiv = $(button).closest('.time-slot');
            slotDiv.remove();

            // remove the timeSlot input
            $(`input[type="hidden"][value="${time}"]`).each(function () {
                if ($(this).attr("name").includes(date)) {
                    $(this).remove();
                }
            });

            // add time back to dropdown
            const select = $(`#select-${date}`);
            select.append(`<option value="${time}">${time}</option>`);
            const options = select.find('option').toArray().sort((a, b) => {
                // get all <option> elements in the <select> element with id select-${date}, convert the jQuery object 'select' to an array and sort it
                return a.value.localeCompare(b.value, undefined, { numeric: true });
                // compart the value attributes of <option> elements a and b.
                // localeCompare() is a string comparison method that respects human-friendly ordering rules.
                // undefined means use the default locale.
                // { numeric: true } tells it to compare numbers within strings properly.
                // Without { numeric: true } "10:00" comes before "2:00"
                // With { numeric: true } "2:00" comes before "10:00"
            });
            select.empty().append(options); // re-attach <option> elements to the <select> tag
        }


        // -------------------------------------- remove selected date --------------------------------------
        function removeDate(date) {
            //selectedDates.splice(selectedDates.indexOf(date), 1); // .splice(dateIndex, 1) removes ONE item from the array selectedDates starting from the dateIndex... meaning it removes only the unwanted passed date

            const trimmedDate = date.trim();
            const index = selectedDates.findIndex(d => d.trim() === trimmedDate); // Remove from selectedDates and dateTimeData
            if (index !== -1) selectedDates.splice(index, 1);
            delete dateTimeData[date];

            // remove the date section from DOM
            $(`.date-section[data-date="${date}"]`).remove();

            console.log('date ' + date+ " is deleted");
            console.log(selectedDates);
        }

        $('form').on('submit', function (e) {
            let isValid = false;

            // Check if at least one date exists and has time slots
            for (const date in dateTimeData) { // go through each date
                if (dateTimeData[date].length > 0) { // check time-slot list length > 0 of the each date go through the for loop
                    isValid = true; // set true if all dates have at least 1 time-slot
                } else{
                    isValid = false;
                    break;
                }
            }

            console.log("isValid",isValid);
            console.log("selectedDates",selectedDates);
            console.log("dateTimeData",dateTimeData);

            if (!isValid) {
                e.preventDefault(); // Stop the form from submitting
                $('#dateValidationAlert').show(); // Show the error message

                console.log("inside form submit when isValid false");
            } else {
                 // e.preventDefault();
                $('#dateValidationAlert').hide(); // Hide it just in case
                console.log("inside form submit when isValid true");
            }
        });

    </script>

}